/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import questionnaireModel.Option;
import questionnaireModel.Poll;
import questionnaireModel.PollSystem;
import questionnaireModel.Question;
import questionnaireModel.QuestionnaireModelPackage;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QuestionnaireModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QuestionnaireModelPackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case QuestionnaireModelPackage.POLL:
				sequence_Poll(context, (Poll) semanticObject); 
				return; 
			case QuestionnaireModelPackage.POLL_SYSTEM:
				sequence_PollSystem(context, (PollSystem) semanticObject); 
				return; 
			case QuestionnaireModelPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     (id=EString? text=EString?)
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PollSystem returns PollSystem
	 *
	 * Constraint:
	 *     polls=Poll?
	 */
	protected void sequence_PollSystem(ISerializationContext context, PollSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Poll returns Poll
	 *
	 * Constraint:
	 *     (name=EString questions=Question?)
	 */
	protected void sequence_Poll(ISerializationContext context, Poll semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (text=EString? options=Option?)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
