/*
 * generated by Xtext 2.21.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PollSystem";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePollSystem
entryRulePollSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPollSystemRule()); }
	iv_rulePollSystem=rulePollSystem
	{ $current=$iv_rulePollSystem.current; }
	EOF;

// Rule PollSystem
rulePollSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPollSystemAccess().getPollSystemAction_0(),
					$current);
			}
		)
		otherlv_1='PollSystem'
		{
			newLeafNode(otherlv_1, grammarAccess.getPollSystemAccess().getPollSystemKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPollSystemAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='polls'
			{
				newLeafNode(otherlv_3, grammarAccess.getPollSystemAccess().getPollsKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPollSystemAccess().getPollsPollParserRuleCall_3_1_0());
					}
					lv_polls_4_0=rulePoll
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPollSystemRule());
						}
						set(
							$current,
							"polls",
							lv_polls_4_0,
							"org.xtext.example.mydsl.MyDsl.Poll");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPollSystemAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePoll
entryRulePoll returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPollRule()); }
	iv_rulePoll=rulePoll
	{ $current=$iv_rulePoll.current; }
	EOF;

// Rule Poll
rulePoll returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPollAccess().getPollAction_0(),
					$current);
			}
		)
		otherlv_1='Poll'
		{
			newLeafNode(otherlv_1, grammarAccess.getPollAccess().getPollKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPollAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPollRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPollAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='questions'
			{
				newLeafNode(otherlv_4, grammarAccess.getPollAccess().getQuestionsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPollAccess().getQuestionsQuestionParserRuleCall_4_1_0());
					}
					lv_questions_5_0=ruleQuestion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPollRule());
						}
						set(
							$current,
							"questions",
							lv_questions_5_0,
							"org.xtext.example.mydsl.MyDsl.Question");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getPollAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuestionAccess().getQuestionAction_0(),
					$current);
			}
		)
		otherlv_1='Question'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getQuestionKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='text'
			{
				newLeafNode(otherlv_3, grammarAccess.getQuestionAccess().getTextKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getTextEStringParserRuleCall_3_1_0());
					}
					lv_text_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"text",
							lv_text_4_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='options'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getOptionsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getOptionsOptionParserRuleCall_4_1_0());
					}
					lv_options_6_0=ruleOption
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"options",
							lv_options_6_0,
							"org.xtext.example.mydsl.MyDsl.Option");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	iv_ruleOption=ruleOption
	{ $current=$iv_ruleOption.current; }
	EOF;

// Rule Option
ruleOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOptionAccess().getOptionAction_0(),
					$current);
			}
		)
		otherlv_1='Option'
		{
			newLeafNode(otherlv_1, grammarAccess.getOptionAccess().getOptionKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOptionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='id'
			{
				newLeafNode(otherlv_3, grammarAccess.getOptionAccess().getIdKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOptionAccess().getIdEStringParserRuleCall_3_1_0());
					}
					lv_id_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOptionRule());
						}
						set(
							$current,
							"id",
							lv_id_4_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='text'
			{
				newLeafNode(otherlv_5, grammarAccess.getOptionAccess().getTextKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOptionAccess().getTextEStringParserRuleCall_4_1_0());
					}
					lv_text_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOptionRule());
						}
						set(
							$current,
							"text",
							lv_text_6_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getOptionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
